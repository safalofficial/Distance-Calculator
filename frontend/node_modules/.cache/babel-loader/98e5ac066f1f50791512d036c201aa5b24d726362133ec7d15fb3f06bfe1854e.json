{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.Aryal\\\\Downloads\\\\New folder (3)\\\\distance-calculator\\\\src\\\\DistanceCalculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DistanceCalculator = () => {\n  _s();\n  const [excelData, setExcelData] = useState([]);\n  const [results, setResults] = useState([]);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      const arrayBuffer = e.target.result;\n      const workbook = XLSX.read(arrayBuffer, {\n        type: \"array\"\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(sheet);\n      setExcelData(data);\n    };\n    reader.readAsArrayBuffer(file); // Using readAsArrayBuffer instead of readAsBinaryString\n  };\n  const calculateDistances = async () => {\n    const distances = [];\n    for (const row of excelData) {\n      const {\n        \"Home Address\": home,\n        \"Store Address\": store,\n        \"Training Location Address\": training,\n        \"Arrive By\": arriveBy\n      } = row;\n      const calculatePair = async (origin, destination) => {\n        try {\n          const response = await axios.get(\"http://localhost:5000/distance-matrix\", {\n            params: {\n              origins: origin,\n              destinations: destination,\n              arrival_time: arriveBy ? new Date(arriveBy).getTime() / 1000 : undefined\n            }\n          });\n          const element = response.data.rows[0].elements[0];\n          return {\n            distance: element.distance.text,\n            travelTime: element.duration.text\n          };\n        } catch (error) {\n          console.error(`Error fetching distance between ${origin} and ${destination}:`, error);\n          return {\n            distance: \"Error\",\n            travelTime: \"Error\"\n          };\n        }\n      };\n\n      // Calculate distances and travel times for all pairs\n      const homeToStore = await calculatePair(home, store);\n      const storeToTraining = await calculatePair(store, training);\n      const homeToTraining = await calculatePair(home, training);\n      distances.push({\n        home,\n        store,\n        training,\n        ...homeToStore,\n        homeToStoreDistance: homeToStore.distance,\n        homeToStoreTime: homeToStore.travelTime,\n        ...storeToTraining,\n        storeToTrainingDistance: storeToTraining.distance,\n        storeToTrainingTime: storeToTraining.travelTime,\n        ...homeToTraining,\n        homeToTrainingDistance: homeToTraining.distance,\n        homeToTrainingTime: homeToTraining.travelTime\n      });\n    }\n    setResults(distances);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Driving Distance Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateDistances,\n      disabled: !excelData.length,\n      children: \"Calculate Distances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Location 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Location 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Distance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Duration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: results.map((result, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.Location1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.Location2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.distance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(DistanceCalculator, \"XvhY1sF9MzCxfqzoesYLuaBpSdM=\");\n_c = DistanceCalculator;\nexport default DistanceCalculator;\nvar _c;\n$RefreshReg$(_c, \"DistanceCalculator\");","map":{"version":3,"names":["React","useState","XLSX","axios","jsxDEV","_jsxDEV","DistanceCalculator","_s","excelData","setExcelData","results","setResults","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","arrayBuffer","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","data","utils","sheet_to_json","readAsArrayBuffer","calculateDistances","distances","row","home","store","training","arriveBy","calculatePair","origin","destination","response","get","params","origins","destinations","arrival_time","Date","getTime","undefined","element","rows","elements","distance","text","travelTime","duration","error","console","homeToStore","storeToTraining","homeToTraining","push","homeToStoreDistance","homeToStoreTime","storeToTrainingDistance","storeToTrainingTime","homeToTrainingDistance","homeToTrainingTime","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","length","border","map","index","Location1","Location2","_c","$RefreshReg$"],"sources":["C:/Users/S.Aryal/Downloads/New folder (3)/distance-calculator/src/DistanceCalculator.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport axios from \"axios\";\r\n\r\nconst DistanceCalculator = () => {\r\n  const [excelData, setExcelData] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      const arrayBuffer = e.target.result;\r\n      const workbook = XLSX.read(arrayBuffer, { type: \"array\" });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const data = XLSX.utils.sheet_to_json(sheet);\r\n      setExcelData(data);\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file); // Using readAsArrayBuffer instead of readAsBinaryString\r\n  };\r\n\r\n  const calculateDistances = async () => {\r\n    const distances = [];\r\n\r\n    for (const row of excelData) {\r\n      const {\r\n        \"Home Address\": home,\r\n        \"Store Address\": store,\r\n        \"Training Location Address\": training,\r\n        \"Arrive By\": arriveBy,\r\n      } = row;\r\n\r\n      const calculatePair = async (origin, destination) => {\r\n        try {\r\n          const response = await axios.get(\r\n            \"http://localhost:5000/distance-matrix\",\r\n            {\r\n              params: {\r\n                origins: origin,\r\n                destinations: destination,\r\n                arrival_time: arriveBy\r\n                  ? new Date(arriveBy).getTime() / 1000\r\n                  : undefined,\r\n              },\r\n            }\r\n          );\r\n          const element = response.data.rows[0].elements[0];\r\n          return {\r\n            distance: element.distance.text,\r\n            travelTime: element.duration.text,\r\n          };\r\n        } catch (error) {\r\n          console.error(\r\n            `Error fetching distance between ${origin} and ${destination}:`,\r\n            error\r\n          );\r\n          return { distance: \"Error\", travelTime: \"Error\" };\r\n        }\r\n      };\r\n\r\n      // Calculate distances and travel times for all pairs\r\n      const homeToStore = await calculatePair(home, store);\r\n      const storeToTraining = await calculatePair(store, training);\r\n      const homeToTraining = await calculatePair(home, training);\r\n\r\n      distances.push({\r\n        home,\r\n        store,\r\n        training,\r\n        ...homeToStore,\r\n        homeToStoreDistance: homeToStore.distance,\r\n        homeToStoreTime: homeToStore.travelTime,\r\n        ...storeToTraining,\r\n        storeToTrainingDistance: storeToTraining.distance,\r\n        storeToTrainingTime: storeToTraining.travelTime,\r\n        ...homeToTraining,\r\n        homeToTrainingDistance: homeToTraining.distance,\r\n        homeToTrainingTime: homeToTraining.travelTime,\r\n      });\r\n    }\r\n\r\n    setResults(distances);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Driving Distance Calculator</h1>\r\n      <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\r\n      <button onClick={calculateDistances} disabled={!excelData.length}>\r\n        Calculate Distances\r\n      </button>\r\n      {results.length > 0 && (\r\n        <table border=\"1\">\r\n          <thead>\r\n            <tr>\r\n              <th>Location 1</th>\r\n              <th>Location 2</th>\r\n              <th>Distance</th>\r\n              <th>Duration</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {results.map((result, index) => (\r\n              <tr key={index}>\r\n                <td>{result.Location1}</td>\r\n                <td>{result.Location2}</td>\r\n                <td>{result.distance}</td>\r\n                <td>{result.duration}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistanceCalculator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}